#### LIST COMPREHENSION BREAKDOWN
# Initiate a list: nums
nums = [12, 8, 21, 3, 16]

# Create a blank list: new_nums
new_nums = []

# Increase nums by 1 and save to new_nums
for num in nums:
    new_nums.append(num + 1)
new_nums

# Using comprehension list
new_nums = [num + 1 for num in nums]
new_nums


#### NESTED LIST COMPREHENSIONS
# a list comprehension within another list comprehension
# Create a 5 x 5 matrix using a list of lists: matrix
matrix = [[col for col in range(0,5)] for row in range(0, 5)]

# Print the matrix
for row in matrix:
    print(row)


#### CONDITIONAL COMPREHENSIONS
# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create list comprehension: new_fellowship
new_fellowship = [member if len(member) >= 7 else '' for member in fellowship]

# Print the new list
print(new_fellowship)


#### DICT COMPREHENSIONS
# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create dict comprehension: new_fellowship
new_fellowship = {member: len(member) for member in fellowship}

# Print the new list
print(new_fellowship)


#### GENERATOR EXPRESSION
# More efficient with big data than comprehension, because it is only a generator not execute yet
# Create generator object: result
result = (num for num in range(0, 31))
result

# List comprehension
[num for num in range(0, 31)]

# Print the first 5 values
print(next(result))
print(next(result))
print(next(result))
print(next(result))
print(next(result))

# Print the rest of the values
for value in result:
    print(value)


#### GENERATOR FUNCTION
# Yields a sequence of values instead of returning a single value
# Create a list of strings
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Define generator function get_lengths
def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield len(person)

# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)
